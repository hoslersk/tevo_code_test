CODE TEST INSTRUCTIONS
Write a program that builds a master list of people from three data files, then prints it to console, sorted in three different ways.

INTRODUCTION
This exercise will provide us with an initial gauge of your programming skills. Every code test submission is graded by one or two of the programmers at Tevo. We evaluate submissions on much more than whether they execute according to the requirements, factors include:
simplicity
elegant design
communicativeness / readability
unit testing
demonstrated ability to follow these instructions!

LIMITATIONS
Your program may only use the standard libraries. When including unit tests with your submission, you may use a unit testing framework.

INPUT FILES
The person data files may be found in the “input_files” directory. Each file contains one person’s information per line. The properties of a person are separated by either a space (” “), a comma (“,”) or a pipe (“|”). You may assume that there are no separators in any of the properties themselves.
Some properties (e.g. gender) are represented differently, depending on the delimiter. The order of properties is different for each format:
￼￼￼￼￼￼￼
The pipe-delimited file lists each record as follows:
LastName | FirstName | MiddleInitial | Gender | FavoriteColor | DateOfBirth The comma-delimited file looks like this:
LastName, FirstName, Gender, FavoriteColor, DateOfBirth
The space-delimited file looks like this:
LastName FirstName MiddleInitial Gender DateOfBirth FavoriteColor

DISPLAY REQUIREMENTS
Create and display 3 different views of the recordset (see sample output):
Output 1 – sorted by gender (females before males) then by last name ascending. Output 2 – sorted by birth date, ascending.
Output 3 – sorted by last name, descending.
Ensure that fields are displayed in the following order: last name, first name, gender, date of birth, favorite color.
Display dates in the format M/D/YYYY.

WHAT TO SUBMIT
Your files should be sent in an archive. Please make sure to include a README
file that describes how to run your solution. If you use a build tool (e.g. rake) to build your project, please include the build file. If you are including unit tests, please include the unit testing library in the archive.
